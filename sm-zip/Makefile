# Copyright (c) 2013 Peter Rowlands

###########################################
### EDIT THESE PATHS FOR YOUR OWN SETUP ###
###########################################

SMSDK = ../sourcemod-1.5
ZLIB = ../zlib
MINIZIP = ../zlib/contrib/minizip

VERSION_HEADER = smzip_version.h

#####################################
### EDIT BELOW FOR OTHER PROJECTS ###
#####################################

PROJECT = smzip

OBJECTS = sdk/smsdk_ext.cpp smzip.cpp $(MINIZIP)/zip.c $(MINIZIP)/unzip.c $(MINIZIP)/ioapi.c

##############################################
### CONFIGURE ANY OTHER FLAGS/OPTIONS HERE ###
##############################################

C_OPT_FLAGS = -DNDEBUG -O3 -funroll-loops -pipe -fno-strict-aliasing
C_DEBUG_FLAGS = -D_DEBUG -DDEBUG -g -ggdb3
C_GCC4_FLAGS = -fvisibility=hidden
CXX_GCC4_FLAGS = -fvisibility-inlines-hidden

ifndef $(CC)
	CC = clang
endif

ifndef $(CXX)
	CXX = clang
endif

CXX_OSX = clang

INCLUDE += -I. -I.. -Isdk -I$(SMSDK)/public -I$(SMSDK)/public/sourcepawn -I$(ZLIB) -I$(MINIZIP)

LINK += -m32 -lm -ldl -L$(ZLIB) $(ZLIB)/libz.a

CFLAGS += -DPOSIX -Dstricmp=strcasecmp -D_stricmp=strcasecmp -D_strnicmp=strncasecmp -Dstrnicmp=strncasecmp \
	-D_snprintf=snprintf -D_vsnprintf=vsnprintf -D_alloca=alloca -Dstrcmpi=strcasecmp -DCOMPILER_GCC -Wall -Werror \
	-Wno-overloaded-virtual -Wno-switch -Wno-unused -msse -DSOURCEMOD_BUILD -DHAVE_STDINT_H -m32
CXXFLAGS += -Wno-non-virtual-dtor -fno-exceptions -fno-rtti

################################################
### DO NOT EDIT BELOW HERE FOR MOST PROJECTS ###
################################################

BINARY = $(PROJECT).ext.$(LIB_EXT)

ifeq "$(DEBUG)" "true"
	BIN_DIR = Debug
	CFLAGS += $(C_DEBUG_FLAGS)
else
	BIN_DIR = Release
	CFLAGS += $(C_OPT_FLAGS)
endif

ifeq "$(USEMETA)" "true"
	BIN_DIR := $(BIN_DIR).$(ENGINE)
endif

ifeq "$(OS)" "Darwin"
	CXX = $(CXX_OSX)
	LIB_EXT = dylib
	CFLAGS += -DOSX -D_OSX
	LINK += -dynamiclib -lstdc++ -mmacosx-version-min=10.5
	ZLIB_ARCH = -arch i386
else
	LIB_EXT = so
	CFLAGS += -D_LINUX
	LINK += -shared
	ZLIB_ARCH = -m32
endif

IS_CLANG := $(shell $(CXX) --version | head -1 | grep clang > /dev/null && echo "1" || echo "0")

ifeq "$(IS_CLANG)" "1"
	CXX_MAJOR := $(shell $(CXX) --version | grep clang | sed "s/.*version \([0-9]\)*\.[0-9]*.*/\1/")
	CXX_MINOR := $(shell $(CXX) --version | grep clang | sed "s/.*version [0-9]*\.\([0-9]\)*.*/\1/")
else
	CXX_MAJOR := $(shell $(CXX) -dumpversion >&1 | cut -b1)
	CXX_MINOR := $(shell $(CXX) -dumpversion >&1 | cut -b3)
endif

# If not clang
ifeq "$(IS_CLANG)" "0"
	CFLAGS += -mfpmath=sse
endif

# Clang || GCC >= 4
ifeq "$(shell expr $(IS_CLANG) \| $(CXX_MAJOR) \>= 4)" "1"
	CFLAGS += $(C_GCC4_FLAGS)
	CXXFLAGS += $(CXX_GCC4_FLAGS)
endif

# Clang >= 3 || GCC >= 4.7
ifeq "$(shell expr $(IS_CLANG) \& $(CXX_MAJOR) \>= 3 \| $(CXX_MAJOR) \>= 4 \& $(CXX_MINOR) \>= 7)" "1"
	CFLAGS += -Wno-delete-non-virtual-dtor
endif

# OS is Linux and not using clang
ifeq "$(shell expr $(OS) \= Linux \& $(IS_CLANG) \= 0)" "1"
	LINK += -static-libgcc
endif

OBJ_BIN := $(OBJECTS:%.cpp=$(BIN_DIR)/%.o)

# This will break if we include other Makefiles, but is fine for now. It allows
#  us to make a copy of this file that uses altered paths (ie. Makefile.mine)
#  or other changes without mucking up the original.
MAKEFILE_NAME := $(CURDIR)/$(word $(words $(MAKEFILE_LIST)),$(MAKEFILE_LIST))

$(BIN_DIR)/%.o: %.cpp $(VERSION_HEADER)
	$(CXX) $(INCLUDE) $(CFLAGS) $(CXXFLAGS) -o $@ -c $<

all: check extension

check: gitversion
	mkdir -p $(BIN_DIR)/sdk

extension: check $(ZLIB)/libz.a $(OBJ_BIN)
	$(CXX) $(INCLUDE) $(OBJ_BIN) $(LINK) -o $(BIN_DIR)/$(BINARY)

debug:
	$(MAKE) -f $(MAKEFILE_NAME) all DEBUG=true

default: all

clean: check
	rm -rf $(BIN_DIR)/*.o
	rm -rf $(BIN_DIR)/sdk/*.o
	rm -rf $(BIN_DIR)/$(BINARY)

$(ZLIB)/configure.log:
	cd $(ZLIB) && ./configure --archs="$(ZLIB_ARCH)" --static

$(ZLIB)/libz.a: $(ZLIB)/configure.log
	cd $(ZLIB) && $(MAKE)

.PHONY: gitversion
gitversion:
	@(SMZIP_VERSION="" ; \
		[ -e "$(VERSION_HEADER)" ] && SMZIP_VERSION=$$(grep "define SMZIP_VERSION " $(VERSION_HEADER) | cut -f3 -d" " | sed 's/"//g') ; \
		GIT_VERSION=$$(git describe --always --tags --dirty) ;\
		echo "SMZIP_VERSION = $$SMZIP_VERSION" ; \
		echo "GIT_VERSION = $$GIT_VERSION" ; \
		if [ "$${GIT_VERSION}" != "$${SMZIP_VERSION}" ] ; then \
			echo "Updating $(VERSION_HEADER)" ; \
			printf "// THIS FILE IS AUTOGENERATED BY MAKE. DO NOT EDIT\n#ifndef _SMZIP_VERSION_H_\n#define _SMZIP_VERSION_H_\n\n#define SMZIP_VERSION \"$${GIT_VERSION}\"\n\n#endif // ! _SMZIP_VERSION_H_" > $(VERSION_HEADER) \
			$(MAKE) clean ; \
		fi )
